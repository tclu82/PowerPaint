/*
 * TCSS 305 Assignment 5 - PowerPaint
 */

package gui;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.event.MouseEvent;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Deque;
import java.util.List;

import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.event.MouseInputAdapter;

import shape.GUIShape;
import tool.Tool;

/**
 * The GUIPanel class extends JPanel. 
 *
 * @author Tzu-Chien Lu tclu82@uw.edu
 * @version Nov 20 2015
 */
public class GUIPanel extends JPanel {
    
    // static constants.

    /** A serialVersionUID is generated by Eclipse because extends from JPanel. */
    private static final long serialVersionUID = 508369234136358064L;
    
    /** The preferred size. */
    private static final Dimension PREFERRED_SIZE = new Dimension(400, 200);
    
    /** The preferred background color. */
    private static final Color BACKGROUND_COLOR = Color.WHITE;
    
    /** The preferred grid space. */
    private static final int GRID_SPACE = 10;
    
    // private fields.
    
    /** The list of GUIShape contains all shapes are drawn. */
    private final List<GUIShape> myShapeList;
    
    /** The current shape. */
    private Shape myShape;
    
    /** The current thickness. */
    private int myThickness;
    
    /** The current color. */
    private Color myColor;
    
    /** The current chosen Tool. */
    private Tool myTool;
    
    /** The current boolean of set grid or not. */
    private boolean myGrid;
    
    /** The current boolean of mouse dragged or not. */
    private boolean myDrag;
    
    /** The JMenuItem for undo. */
    private final JMenuItem myUndo;

    /** The JMenuItem for re-do. */
    private final JMenuItem myRedo;
    
    /** A ArrayDeque contains shapes for re-do using. */
    private final Deque<GUIShape> myRedoDeque;
    
    /**
     * Constructor for GUIPanel class, initialize reasonable values for private fields, and
     * calls helper method to setup for setup.
     */
    public GUIPanel() {
        super();
        myShapeList = new ArrayList<GUIShape>();
        
        /** Initial thickness is 1. */
        myThickness = 1;
        
        /** Initial color is black. */
        myColor = Color.BLACK;
        myGrid = false;
        myDrag = false;
        myUndo = new JMenuItem();
        myRedo = new JMenuItem();
        myRedoDeque = new ArrayDeque<GUIShape>();
        setup();
    }
    
    /**
     * A private method setup background color, preferred size, and add mouse listeners.
     */
    private void setup() {
        setBackground(BACKGROUND_COLOR);
        setPreferredSize(PREFERRED_SIZE);
        
        /** Add mouse listeners (local inner class) to this GUIPanel. */
        addMouseListener(new MyMouseListener());
        addMouseMotionListener(new MyMouseListener());
    }
    
    /**
     * Set up the current tool is going to be printed.
     * 
     * @param theTool a current tool.
     */
    public void setTool(final Tool theTool) {
        myTool = theTool;
    }
    
   /**
    * Set up the current shape is going to be printed.
    * 
    * @param theShape a current shape.
    */
    public void setShape(final Shape theShape) {
        myShape = theShape;
    }
    
    /**
     * Set up the thickness value for current shape.
     * 
     * @param theThickness the thickness value.
     */
    public void setThickness(final int theThickness) {
        myThickness = theThickness;
    }
    
    /**
     * Return myColor represents current color.
     * 
     * @return a color.
     */
    public Color getColor() {
        return myColor;
    }
    
    /**
     * Set passed color to myColor and repaint for following shapes.
     * 
     * @param theColor a color is chosen from JColorChooser.
     */
    public void setColor(final Color theColor) {
        myColor = theColor;
        repaint();
    }
    
    /**
     * A boolean represents setGrid is selected or not.
     * 
     * @param theGrid a boolean.
     */
    public void setGrid(final boolean theGrid) {
        myGrid = theGrid;
        repaint();
    }
    
    /**
     * Clear all shapes from GUIPanel.
     */
    public void clearPanel() {
        myShapeList.clear();
        repaint();
    }
    
    /**
     * Paint all components for GUIPanel.
     * 
     * @param theGraphics the graphics is used to paint.
     */
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        
        /** Graphics2D has more details than Graphics, so let's cast it to better one.*/
        final Graphics2D g2d = (Graphics2D) theGraphics;
        
        /** This static method is used to anti-aliases. */
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                               RenderingHints.VALUE_ANTIALIAS_ON);
        
        /** Set the thickness and color for graphic. */
        g2d.setStroke(new BasicStroke(myThickness));
        g2d.setPaint(myColor);
        
        /** 3 helper methods help to draw shape, thickness, and grid on GUIPanel. */
        paintShapes(g2d);
        paintThickness(g2d);
        paintGrid(g2d);
    }
    
    /**
     * Check all shapes in myShapeList then print them out.
     * 
     * @param theG2D is a Graphic ready to be painted.
     */
    private void paintShapes(final Graphics2D theG2D) {
        
        if (!myShapeList.isEmpty()) {
            
            for (final GUIShape shape: myShapeList) {
                theG2D.setStroke(new BasicStroke(shape.getThickness()));
                theG2D.setPaint(shape.getColor());
                theG2D.draw(shape.getShape());
            }
        }
    }
    
    /**
     * Paint graphics with selected thickness and color.
     * 
     * @param theG2D is a Graphic ready to be painted.
     */
    private void paintThickness(final Graphics2D theG2D) {
        
        if (myThickness != 0) {
            
            if (myDrag) {
                theG2D.setPaint(myColor);
                theG2D.setStroke(new BasicStroke(myThickness));
                theG2D.draw(myShape);
            }
            myDrag = false;
        }
    }
    
    /**
     * Set grid for whole GUIPanel, grid always on the top of the GUIPanel.
     * 
     * @param theG2D is a Graphic ready to be painted.
     */
    private void paintGrid(final Graphics2D theG2D) {
        
        /** myGrid is selected. */
        if (myGrid) {
            theG2D.setStroke(new BasicStroke(1));
            theG2D.setPaint(Color.GRAY);
            
            /** Draw horizontal line. */
            for (int count = 0; count < getHeight(); count += GRID_SPACE) {
                theG2D.drawLine(0, count, (int) getWidth(), count);
            }
            
            /** Draw vertical line. */
            for (int count = 0; count < getWidth(); count += GRID_SPACE) {
                theG2D.drawLine(count, 0, count, (int) getHeight());
            }
        }
    }
     
    /**
     * Undo the latest drawing.
     */
    public void undoPaint() {
        
        if (myShapeList.isEmpty()) {
            myUndo.setEnabled(false);
            
        } else {
            myRedoDeque.addFirst(myShapeList.remove(myShapeList.size() - 1));
        }  
        repaint();
    }

    /**
     * Re-do the latest erase.
     */
    public void redoPaint() {
        
        if (myRedoDeque.isEmpty()) {
            myRedo.setEnabled(false);
            
        } else {
            myShapeList.add(myRedoDeque.pop());
        }
        repaint();
    }  
    
    /**
     * Local inner class for mouse actions.
     * 
     * @author Tzu-Chien Lu tclu82@uw.edu
     * @version Nov 20 2015
     */
    private class MyMouseListener extends MouseInputAdapter {
        
        /** 
         * Start point or start point and end point at the same spot. 
         */
        @Override
        public void mousePressed(final MouseEvent theEvent) {
            
            /** Shallow copy of Point. */
            final Point p = (Point) theEvent.getPoint().clone();
            
            if (myThickness != 0) {
                myTool.setStartPoint(p);
                myTool.setEndPoint(p);
            }
        }
        
        /** 
         * A shape is forming. 
         */
        @Override
        public void mouseDragged(final MouseEvent theEvent) {
            
            /** Shallow copy of Point. */
            final Point p = (Point) theEvent.getPoint().clone();
            
            if (myThickness != 0) {
                myTool.setEndPoint(p);
                myDrag = true;
                repaint();
            }
        }
        
        /** 
         * A shape is formed when mouse release. 
         */
        @Override
        public void mouseReleased(final MouseEvent theEvent) {
            
            /** A new shape is completed, add to myShapeList. */
            myShapeList.add(new GUIShape(myTool.getShape(), myThickness, myColor));
            myUndo.setEnabled(true);
            myRedo.setEnabled(false);
            
            /** Re-do should be reset after a new shape is drawn. */
            myRedoDeque.clear();
            repaint();
        }
        
        /** 
         * Set cross hair cursor within the GUIPanel. 
         */
        @Override
        public void mouseMoved(final MouseEvent theEvent) {
            setCursor(Cursor.getPredefinedCursor(Cursor.CROSSHAIR_CURSOR));
        }
    } 
}
