/*
 * TCSS 305 Assignment 5 - PowerPaint
 */

package gui;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;

import javax.swing.Action;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JColorChooser;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSlider;
import javax.swing.KeyStroke;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.MouseInputAdapter;

/**
 * The MenuBar class extends JMenuBar, setup for File, Option, Tools, and Help all 4 JMenu, 
 * and their JMenuItems. 
 *
 * @author Tzu-Chien Lu tclu82@uw.edu
 * @version Nov 20 2015
 */
public class GUIMenuBar extends JMenuBar {
    
    /** A serialVersionUID is generated by Eclipse because extends from JMenuBar. */
    private static final long serialVersionUID = -111659266189879540L;
    
    /** A string is used for icon. */
    private static final String THE_ICON = "images/";
    
    /** Ask user to choose a color. */
    private static final String ASK_COLOR = "What color do you want ?";
    
    /** The slider has major tick marks (with labels) at increments of 5. */
    private static final int MAJOR_TICK = 5;
    
    /** A string is used in JMenu "Help". */
    private static final String THE_ABOUT = "About...";
    
    /** A message is used for JOptionPane pop-up. */
    private static final String DIALOG_MESSAGE = "TCSS 305 PowerPaint, Autumn 2015"
                                                + "\nby Tzu-Chien (Zac) Lu tclu82@uw.edu"
                                                + "\nThis is my dream car!"
                                                + "\nCopyright from: http://goo.gl/QP6BX1"
                                                + "\nThis project is designed for "
                                                + "academic use only.";
    
    /** A List contains all actions. */
    private final Action[] myActions;
    
    /** A JFrame is used to contain all components. */
    private final JFrame myFrame;
    
    /** Calls the Panel object I created. */
    private final GUIPanel myPanel;
    
    /** Call the GUIIcon class I created for JMenuItem color icon. */
    private final GUIIcon myIcon;
    
    /** A JMenuItem is used for undo all shapes. */
    private final JMenuItem myUndoAll;
    
    /** A JMenuItem for undo 1 time. */
    private final JMenuItem myUndo;
    
    /** A JMenuItem for re-do 1 time. */
    private final JMenuItem myRedo;
    
    /**
     * The constructor of GUIMenuBar, initializes all private fields with reasonable values.
     * 
     * @param theActions an action array is passed from ToolsActions instance.
     * @param theFrame a JFrame is used to contain all components.
     * @param thePanel a GUIPanel is used to draw all components.
     */
    public GUIMenuBar(final Action[] theActions, 
                      final JFrame theFrame, 
                      final GUIPanel thePanel) {
        
        /** Call the JMenuBar. */
        super();
        
        /** A shallow copy for action array which is passed from ToolsActions instance. */
        myActions = theActions.clone();
        myFrame = theFrame;
        myPanel = thePanel;
        
        /** The initial color of icon is black. */
        myIcon = new GUIIcon(Color.BLACK); 
        
        /** Undo all JMenuItem with mnemonic key. */
        myUndoAll = new JMenuItem("Undo all changes", (int) 'U');

        /** undo & re-do JMenuItem with icons. */
        myUndo = new JMenuItem("Undo", new ImageIcon(THE_ICON + "undoicon.png"));
        myRedo = new JMenuItem("Redo", new ImageIcon(THE_ICON + "redoicon.png"));
        
        /** A helper method creates menu bar.*/
        createMenuBar();
    }
    
    /**
     * A private method with 4 helper methods to create 4 JMenu.
     */
    private void createMenuBar() {
        
        /** Another 4 helper methods add all 4 JMenu to whomever calls (JMenuBar). */
        add(createJMenuFile());
        add(createJMenuOptions());
        add(createJMenuTools());
        add(createJMenuHelp());
    }
    
    /**
     * A private method creates JMenu for "File".
     * 
     * @return JMenu represents File.
     */
    private JMenu createJMenuFile() {
        final JMenu file = new JMenu("File");
        
        /** Set mnemonic key for F underlined. */
        file.setMnemonic(KeyEvent.VK_F);
        
        /** Another 4 helper methods to setup each JMenuItem. */
        createJMenuItemUndoAll(file);
        createJMenuItemUndo(file);
        createJMenuItemRedo(file);
        createJMenuItemExit(file);
        
        return file;
    }
    
    /**
     * A private method sets up the undo all behavior.
     * 
     * @param theMenu the JMenut for this JMenuItem.
     */
    private void createJMenuItemUndoAll(final JMenu theMenu) {
        
        /** Nothing to undo, set default disable. */
        myUndoAll.setEnabled(false);
        
        /** Anonymous inner class, clear all paint and set 3 undo/re-do buttons to disable. */
        myUndoAll.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                
                /** Clear all shapes on JPAnel*/
                myPanel.clearPanel();
                myUndoAll.setEnabled(false);
                myUndo.setEnabled(false);
                myRedo.setEnabled(false);
            }
        });
           
        theMenu.add(myUndoAll);
        theMenu.addSeparator();
    }
    
    /**
     * Set up the undo behavior.
     * 
     * @param theMenu the JMenut for this JMenuItem.
     */
    private void createJMenuItemUndo(final JMenu theMenu) {
        myUndo.setEnabled(false);        
        
        /** Register the accelerator key. */
        myUndo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Z, InputEvent.CTRL_MASK));
        
        /** Attach listener to undo JMenuItem. */
        myUndo.addActionListener(new ActionListener() {
            
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                
                /** Calls undoPaint method from GUIPanel class. */
                myPanel.undoPaint();
                
                /** Now re-do is enable. */
                myRedo.setEnabled(true);
            }
        });
        
        /** Attach a customized mouse listener to GUIPanel. */
        myPanel.addMouseListener(new MyMouseListener());
        theMenu.add(myUndo);
        theMenu.addSeparator();
    }
    
    /**
     * Set up the re-do behavior.
     * 
     * @param theMenu the JMenut for this JMenuItem.
     */
    private void createJMenuItemRedo(final JMenu theMenu) {
        
        /** Register the accelerator key. */
        myRedo.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Y, InputEvent.CTRL_MASK));
        myRedo.setEnabled(false);
        
        /** Attach listener to undo JMenuItem. */
        myRedo.addActionListener(new ActionListener() {
                
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                
                /** Calls redoPaint method from GUIPanel class. */
                myPanel.redoPaint();
            }
        });
        
        /** Attach a customized mouse listener to GUIPanel. */
        myPanel.addMouseListener(new MyMouseListener());
        theMenu.add(myRedo);
        theMenu.addSeparator();
    }
    
    /**
     * Sets up the JMenuItem for Exit.
     * 
     * @param theMenu the JMenut for this JMenuItem.
     */
    private void createJMenuItemExit(final JMenu theMenu) {
        
        /** Create Exit JMenuItem and set mnemonic key with its constructor. */
        final JMenuItem exit = new JMenuItem("Exit", (int) 'x');
        
        /** Attach a listener to exit. */
        exit.addActionListener(new ActionListener() {
            
            /** An anonymous inner class implements ActionLister.*/
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                
                /** Close the frame.*/
                myFrame.dispose();
                //myFrame.dispatchEvent(new WindowEvent(myFrame, WindowEvent.WINDOW_CLOSING));
            }
        });
        
        /** Add all JMenuItems followed by separator to JMenu "File". */
        theMenu.add(exit);
    }
    
   /**
    * A private method creates a JMenu and calls 3 helper methods for sub-menu.
    * 
    * @return a JMenu for Option select.
    */
    private JMenu createJMenuOptions() {
        final JMenu options = new JMenu("Options");
        
        /** Set mnemonic key for O underlined. */
        options.setMnemonic(KeyEvent.VK_O);
        
        /** 3 helper methods create Grid, Thickness, and Color for drawn objects.*/
        selectGrid(options);
        slideThickness(options);
        chooseColor(options);
        return options;
    }
    
    /**
     * A private method creates check box then add to a JMenu. 
     * 
     * @param theMenu a JMenu is passed for add a check box.
     */
    private void selectGrid(final JMenu theMenu) {
        final JCheckBoxMenuItem checkBox = new JCheckBoxMenuItem("Grid");
        
        /** Set mnemonic key for G underlined. */
        checkBox.setMnemonic(KeyEvent.VK_G);
        
        /** An anonymous inner class.*/
        checkBox.addActionListener(new ActionListener() {
            
            /**
             * A method sets the grid on GUIPanel.
             * 
             * @param theEvent a mouse event.
             */
            @Override 
            public void actionPerformed(final ActionEvent theEvent) {
                
                if (checkBox.isSelected()) {
                    myPanel.setGrid(true);
                    
                } else {
                    myPanel.setGrid(false);
                }
            }
        });    
        
        /** Add checkBox JMenuItem to JMenu, then add separator. */
        theMenu.add(checkBox);
        theMenu.addSeparator();
    }
    
    /**
     * A private method sets slider for thickness selection, then add to a JMenu.
     * 
     * @param theMenu a JMenu is passed to add the slider.
     */
    private void slideThickness(final JMenu theMenu) {
        final JMenu subMenu = new JMenu("Thickness");
        
        /** A horizontal JSlider with minimum 0, maximum 20, increment by 1. */
        final JSlider thickness = new JSlider(JSlider.HORIZONTAL, 0, 20, 1);
        subMenu.add(thickness);
        
        /** Set mnemonic key for T underlined. */
        subMenu.setMnemonic(KeyEvent.VK_T);
        
        /** Add major and minor tick space with required integers. */
        thickness.setMajorTickSpacing(MAJOR_TICK);
        thickness.setMinorTickSpacing(1);
        
        /** Set Paint tick to true and paint labels. */
        thickness.setPaintTicks(true);
        thickness.setPaintLabels(true);
        
        /** A change listener is used to set different thickness to shape. */
        thickness.addChangeListener(new ChangeListener() {
            
            @Override
            public void stateChanged(final ChangeEvent theEvent) {
                myPanel.setThickness(thickness.getValue());
            }
        });     
       
        theMenu.add(subMenu);
        theMenu.addSeparator();
    }
    
    /**
     * A private method add JColorChooser to JMenuItem.
     * 
     * @param theMenu a JMenu is passed to add JMenuItem.
     */
    private void chooseColor(final JMenu theMenu) {
        
        /** myIcon is a GUIIcon class. */
        final JMenuItem color = new JMenuItem("Color...", myIcon); 
       
        /** Set mnemonic key for C underlined. */
        color.setMnemonic(KeyEvent.VK_C);
        
        /** Attach a listener to color. */
        color.addActionListener(new ActionListener() {
            
            /** An anonymous inner class implements ActionLister.*/
            @Override
            public void actionPerformed(final ActionEvent theEvent) {
                
                /** JColorChooser, default color is black. */
                final Color picked = JColorChooser.showDialog(null, ASK_COLOR, 
                                                  myPanel.getColor());               
                
                /** Add color to small icon and panel. */
                myIcon.setColor(picked);
                myPanel.setColor(picked);                       
            }
        });
        theMenu.add(color);
    }
    
    /**
     * A private method create JMenu of Tools.
     * 
     * @return a JMenu represents "Tools".
     */
    private JMenu createJMenuTools() {
        final JMenu tools = new JMenu("Tools");
        
        /** Set mnemonic key for T underlined. */
        tools.setMnemonic(KeyEvent.VK_T);
        
        /** Button group to keep radio button is only selected 1 at the same time. */
        final ButtonGroup bg = new ButtonGroup();
        
        /** For all actions, add to JMenuItem of Tools and button group. */
        for (final Action a: myActions) {
            
            /** Calls helper method for create radio button for JMenuItem.*/
            tools.add(createRadioMenuItem(a));
            bg.add(createRadioMenuItem(a));
        }
        return tools;
    }
    
    /**
     * A private method creates radio button for JMenuItem.
     * 
     * @param theAction an action is passed from ToolsActions instance.
     * @return a JRadioButtonMenuItem.
     */
    private JRadioButtonMenuItem createRadioMenuItem(final Action theAction) {
        return new JRadioButtonMenuItem(theAction);
    }
      
    /**
     * A private method creates JMenu for "Help".  
     * 
     * @return a JMenu of "Help".
     */
    private JMenu createJMenuHelp() {
        final JMenu help = new JMenu("Help");
        
        /** Set mnemonic key for H underlined. */
        help.setMnemonic(KeyEvent.VK_H);
        final JMenuItem about = new JMenuItem(THE_ABOUT, (int) 'A');
        
        /** Attach a listener to JMenu about, anonymous inner class. */
        about.addActionListener(new ActionListener() {
            
            /**
             * Set up a JOptionPane to display informaiton.
             * 
             * @param theEvent a mouse event.
             */
            @Override 
            public void actionPerformed(final ActionEvent theEvent) {
                
                /** Pop-up JOptionPane information. */
                JOptionPane.showMessageDialog(null, 
                                              DIALOG_MESSAGE,
                                              THE_ABOUT, JOptionPane.PLAIN_MESSAGE,
                                              new ImageIcon(THE_ICON + "gtr1.jpg"));
            }
        });
        
        help.add(about);
        return help;
    }
    
    /**
     * A local inner class is used for mouse listener for undo and re-do JMenuItem.
     * 
     * @author Tzu-Chien Lu tclu82@uw.edu
     * @version Nov 20 2015
     */
    private class MyMouseListener extends MouseInputAdapter {
        
        /** Once start drawing, set undo all and undo to true. */
        @Override
        public void mouseReleased(final MouseEvent theEvent) {
            myUndo.setEnabled(true);
            myUndoAll.setEnabled(true);
        }
    }
}
