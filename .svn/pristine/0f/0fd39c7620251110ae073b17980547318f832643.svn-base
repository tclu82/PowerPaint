/*
 * TCSS 305 Assignment 5 - PowerPaint
 */

package tool;

import java.awt.Point;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.ImageIcon;

/**
 * The Abstract class extends from AbstractAction, which means it has actionPerformed(), 
 * isEnable(), putValue(), getValue(). It also implements from Tool, either this class or 
 * subclass need to implement 3 abstract methods of Tool interface.
 * 
 * @author Tzu-Chien Lu tclu82@uw.edu
 * @version Nov 20 2015
 */
public abstract class AbstractTool extends AbstractAction implements Tool {

    /** A protected String represents the image location is used for all 4 tools. */
    protected static final String ICON_FOLDER = "images/";
    
    /** A serialVersionUID is generated by Eclipse. */
    private static final long serialVersionUID = -5038096036445907070L;
    
    /** A start point is used in Rectangle and Ellipse. */
    protected Point myStartPoint;
      
    /**
     * Protected constructor can only be accessed itself and subclasses.
     * 
     * Java API shows AbstractAction has 3 constructors, I think this one is best one for this
     * project.
     * 
     * @param theName each tool's name.
     * @param theIcon each tool's image icon.
     */
    protected AbstractTool(final String theName, final ImageIcon theIcon) {
        super(theName, theIcon);
        
        /** Synchronized the selected Action to both menu bar and tool bar. */
        putValue(Action.SELECTED_KEY, true);
        
        /** Show tool's name when hover on tool bar.*/
        putValue(Action.SHORT_DESCRIPTION, getClass().getSimpleName());
    }

    /* (non-Javadoc)
     * @see model.Tool#setStartPoint(java.awt.Point)
     * 
     * Rectangle and Ellipse use this super method.
     */
    @Override
    public void setStartPoint(final Point thePoint) {
        myStartPoint = (Point) thePoint.clone();
    }
}
